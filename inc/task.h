/**
 * @file task.h
 * @brief Header defining the data structures belonging to a single task and related functions.
 *
 * @author emlix GmbH, 37083 GÃ¶ttingen, Germany
 *
 * @copyright 2023 Elektrobit Automotive GmbH
 *            All rights exclusively reserved for Elektrobit Automotive GmbH,
 *            unless otherwise expressly agreed
 */
#ifndef __TASK_H__
#define __TASK_H__

#include "confparse.h"
#include "crinit-sdefs.h"
#include "envset.h"
#include "ioredir.h"

typedef unsigned long ebcl_TaskOpts_t;  ///< Type to store Task option bitmask.

#define EBCL_TASK_OPT_RESPAWN (1 << 0)       ///< RESPAWN task option bitmask.
#define EBCL_TASK_OPT_RESPAWN_DEFAULT false  ///< Default value for RESPAWN option

#define EBCL_TASK_EVENT_RUNNING "spawn"  ///< Dependency event that fires when a task reaches the RUNNING state.
#define EBCL_TASK_EVENT_DONE "wait"      ///< Dependency event that fires when a task reaches the DONE state.
#define EBCL_TASK_EVENT_FAILED "fail"    ///< Dependency event that fires when a task reaches the FAILED state.
#define EBCL_TASK_EVENT_NOTIFY_SUFFIX \
    "-notified"  ///< Dependency event suffix to indicate the event needs to be generated by sd-notify

typedef enum ebcl_TaskType_t { EBCL_TASK_TYPE_STANDARD, EBCL_TASK_TYPE_INCLUDE } ebcl_TaskType_t;

/**
 * Type to store a single command within a task.
 */
typedef struct ebcl_TaskCmd_t {
    int argc;     ///< Number of arguments within argv.
    char **argv;  ///< String array containing the program arguments, argv[0] contains absolute path to executable.
} ebcl_TaskCmd_t;

/**
 * Type to store a single dependency within a task.
 */
typedef struct ebcl_TaskDep_t {
    char *name;   ///< Dependency name.
    char *event;  ///< Dependency event.
} ebcl_TaskDep_t;

/**
 * Type to store a single provided feature within a task.
 */
typedef struct ebcl_TaskPrv_t {
    char *name;                 ///< Name of the provided feature.
    ebcl_TaskState_t stateReq;  ///< The task state required to be reached to provide the feature.
} ebcl_TaskPrv_t;

/**
 * Type to store a single task.
 */
typedef struct ebcl_Task_t {
    char *name;              ///< Name of the task, corresponds to NAME in the config file.
    ebcl_TaskCmd_t *cmds;    ///< Dynamic array of commands, corresponds to COMMAND[N] in the config file.
    size_t cmdsSize;         ///< Number of commands in cmds array.
    crinitEnvSet_t taskEnv;   ///< Environment variables valid for each COMMAND in this task.
    ebcl_TaskDep_t *deps;    ///< Dynamic array of dependencies, corresponds to DEPENDS in the config file.
    size_t depsSize;         ///< Number of dependencies in deps array.
    ebcl_TaskPrv_t *prv;     ///< Dynamic array of provided features, corresponds to PROVIDES in the config file.
    size_t prvSize;          ///< Number of provided features in prv array.
    ebcl_TaskOpts_t opts;    ///< Task options.
    ebcl_TaskState_t state;  ///< Task state.
    pid_t pid;               ///< PID of currently running process subordinate to the task, if any.
    ebcl_IoRedir_t *redirs;  ///< IO redirection descriptions.
    size_t redirsSize;       ///< Number of IO redirections.
    int maxRetries;          ///< If ebcl_Task_t::opts includes #EBCL_TASK_OPT_RESPAWN, this variable specifies a
                             ///< maximum consecutive number of respawns after failure (default: -1 for infinite).
    int failCount;           ///< Counts consecutive respawns after failure (see ebcl_TaskOpts_t::maxRetries). Resets
                             ///< on a successful completion (i.e. all COMMANDs in the task have returned 0).
} ebcl_Task_t;

/**
 * Given an ebcl_ConfKvList_t created from a task config, build an equivalent ebcl_Task.
 *
 * The ebcl_Task returned via \a out is dynamically allocated and should be freed using EBCL_freeTask if no longer
 * needed.
 *
 * @param out  The return pointer for the newly created task.
 * @param in   The ebcl_ConfKvList_t from which to build the task.
 *
 * @return 0 on success, -1 on error
 */
int EBCL_taskCreateFromConfKvList(ebcl_Task_t **out, const ebcl_ConfKvList_t *in);

/**
 * Frees memory associated with an ebcl_Task created by EBCL_taskCreateFromConfKvList() or EBCL_taskDup().
 *
 * Uses EBCL_destroyTask() internally and then frees the given pointer.
 *
 * @param t  Pointer to the ebcl_Task to free.
 */
void EBCL_freeTask(ebcl_Task_t *t);

/**
 * Frees memory for internal members of an ebcl_Task_t.
 *
 * @param t  The task whose members shall be freed.
 */
void EBCL_destroyTask(ebcl_Task_t *t);

/**
 *  Duplicates an ebcl_Task.
 *
 *  The copy returned via \a out is dynamically allocated and should be freed using EBCL_freeTask() if no longer needed.
 *
 *  @param out   Double pointer to return a dynamically allocated copy of \a orig.
 *  @param orig  The original task to copy.
 *
 *  @return 0 on success, -1 on error
 */
int EBCL_taskDup(ebcl_Task_t **out, const ebcl_Task_t *orig);

/**
 * Merges the options set in a given include file into the target ebcl_Task_t.
 *
 * Uses the same parser handlers as regular task files but will fail if configuration options are encountered where
 * ebcl_ConfigMapping_t::includeSafe is `false`. Optionally a comma-separated importList can be specified. If given,
 * only the configuration options in the list will be merged. If not given, everything in the include file will be
 * imported.
 *
 * @param tgt         The target ebcl_Task_t which will be modified.
 * @param src         Name of the include file to parse/merge (filename without leading path and ending).
 * @param importList  A comma-separated list which configs to merge from the include file. `NULL` means everything.
 *
 * @return  0 on success, -1 on failure
 */
int EBCL_taskMergeInclude(ebcl_Task_t *tgt, const char *src, char *importList);

#endif /* __TASK_H__ */
